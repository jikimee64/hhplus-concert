plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'hhplus'
version = '0.0.1-SNAPSHOT'

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file("$projectDir/build/generated")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0")

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'

    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    // querydsl
    annotationProcessor "com.querydsl:querydsl-apt:5.1.0:jakarta"
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Guava
    implementation("com.google.guava:guava:33.0.0-jre")

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.mysql:mysql-connector-j'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

/**
 * === QueryDsl 빌드 옵션 ===
 * 해당 설정이 없으면 엔티티 패키지 이동 후 Q파일이 새로운 경로로 생성되지 않음
 */
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslDir)
}

clean.doLast {
    file(querydslDir).deleteDir()
}

tasks.named('test') {
    useJUnitPlatform()
//    finalizedBy 'jacocoTestReport' // test가 끝나면 jacocoTestReport 동작
}

